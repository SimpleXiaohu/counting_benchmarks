
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all)))))))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.++ (re.++ (re.++ (re.++ (re.*? re.allchar) (str.to.re "r")) (re.++ (str.to.re "e") (re.++ (str.to.re "p") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "e") ((_ re.capture 1) (re.++ (re.++ (re.++ (str.to.re "M") (re.++ (str.to.re "o") (re.++ (str.to.re "b") (re.++ (str.to.re "i") (re.++ (str.to.re "l") (re.++ (str.to.re "e") (re.++ (str.to.re "N") (str.to.re "o")))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re " ") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";")))))))))))))))))))) (re.++ (str.to.re ",") (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (str.to.re ";"))))))) (re.++ re.begin-anchor (re.++ ((_ re.capture 2) (re.union (re.union (re.++ (str.to.re "+") (re.++ (str.to.re "4") (str.to.re "4"))) (re.++ (str.to.re "0") (re.++ (str.to.re "0") (re.++ (str.to.re "4") (str.to.re "4"))))) (str.to.re "0"))) (re.++ ((_ re.capture 3) (str.to.re "7")) (re.++ (re.range "4" "9") ((_ re.loop 0 8) (re.range "0" "9"))))))) (re.++ re.end-anchor (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (str.to.re ";") re.all))))))))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
