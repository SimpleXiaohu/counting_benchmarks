
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.++ ((_ re.capture 1) (re.union ((_ re.capture 2) (re.++ ((_ re.capture 3) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to.re "(") (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ")"))))) ((_ re.capture 4) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re "-"))))) (re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.++ (str.to.re "-") (re.++ ((_ re.loop 0 4) (re.range "0" "9")) (re.++ ((_ re.loop 0 0) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 1) ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.union ((_ re.capture 7) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.++ (re.union (str.to.re "x") (str.to.re "X")) (re.union (str.to.re "T") (str.to.re "t"))))) ((_ re.capture 8) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.++ (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "E") (str.to.re "e"))))))))) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))) re.all)))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
