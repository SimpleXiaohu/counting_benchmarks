
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all))))))))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "s") (re.++ (str.to.re "i") (str.to.re "p"))) (re.++ (str.to.re "s") (re.++ (str.to.re "i") (re.++ (str.to.re "p") (str.to.re "s")))))) (re.++ (str.to.re ":") (re.++ (re.* (re.diff (re.range "\x01" "\xff") (str.to.re "\n"))) (re.++ (str.to.re "@") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) ((_ re.loop 1 3) (re.range "0" "9"))))))))) ((_ re.capture 4) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to.re "-") (str.to.re "."))))) (re.++ (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z")))))))) (re.++ (re.opt ((_ re.capture 5) (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9"))))) (re.++ (re.opt ((_ re.capture 6) (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "-") (re.union (str.to.re "?") (re.union (str.to.re "@") (re.union (str.to.re "?") (re.union (str.to.re ";") (re.union (str.to.re "?") (re.union (str.to.re ",") (re.union (str.to.re "?") (re.union (str.to.re "=") (re.union (str.to.re "%") (str.to.re "&"))))))))))))))) re.all)))))))))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
