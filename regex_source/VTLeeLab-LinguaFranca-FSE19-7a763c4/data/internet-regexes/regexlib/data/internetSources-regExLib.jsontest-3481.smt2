
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor)) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.++ ((_ re.loop 3 4) (re.union (re.range "a" "y") (re.range "A" "Y"))) (re.++ (re.union (re.opt (str.to.re ".")) ((_ re.loop? 1 6) (re.union (re.range "a" "y") (re.range "A" "Y")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "9")) (re.++ (re.range "0" "9") (re.++ (re.opt ((_ re.loop 0 2) (re.union (re.range "d" "t") (re.range "D" "T")))) (re.++ (re.opt (str.to.re ",")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.union (re.++ (str.to.re "&") (re.++ (str.to.re "#") (re.++ (str.to.re "3") (re.++ (str.to.re "9") (re.++ (re.opt (str.to.re ";")) (re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 0 4) (re.range "0" "9"))))))))))))) re.end-anchor))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
