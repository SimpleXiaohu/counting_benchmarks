
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.union (re.union (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.++ ((_ re.loop 0 3) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (str.to.re "d")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.range "A" "Z")))))) re.all)) (re.++ ((_ re.capture 3) (re.++ (re.++ (re.*? re.allchar) (re.range "A" "Z")) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 4) (re.union (re.union ((_ re.loop 0 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.range "0" "9"))) ((_ re.loop 0 1) (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.range "A" "Z"))))))) re.all)) (re.++ ((_ re.capture 5) (re.++ ((_ re.capture 6) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "H")) (re.union (re.++ (re.*? re.allchar) (re.range "K" "P")) (re.union (re.++ (re.*? re.allchar) (str.to.re "R")) (re.union (re.++ (re.*? re.allchar) (str.to.re "S")) (re.union (re.++ (re.*? re.allchar) (str.to.re "V")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.++ (re.*? re.allchar) (str.to.re "Y")))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 7) (re.union (re.++ (str.to.re "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.opt (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.loop 0 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Z"))))))))) re.end-anchor)))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
