
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.*? re.allchar) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.capture 1) (re.++ ((_ re.capture 2) (re.union (str.to.re "I") (re.union (str.to.re "X") (re.union (str.to.re "C") (str.to.re "M"))))) ((_ re.loop 0 3) (_ re.reference 2)))) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "I")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "V")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "L")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "C")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.diff (re.range "\x01" "\xff") (str.to.re "M"))))))))) ((_ re.capture 3) (re.++ (re.union (str.to.re "I") (str.to.re "L")) (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "X") (str.to.re "D")) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 5) (re.++ (str.to.re "V") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M"))))))))) ((_ re.capture 6) (re.++ (str.to.re "I") (re.++ (str.to.re "X") (re.union (str.to.re "V") (re.union (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))))) ((_ re.capture 7) (re.++ (str.to.re "V") (re.++ (str.to.re "I") (re.union (str.to.re "V") (str.to.re "X")))))) ((_ re.capture 8) (re.++ (str.to.re "X") (re.++ (str.to.re "C") (re.union (str.to.re "L") (re.union (str.to.re "C") (re.union (str.to.re "D") (str.to.re "M")))))))) ((_ re.capture 9) (re.++ (str.to.re "L") (re.++ (str.to.re "X") (re.union (str.to.re "L") (str.to.re "C")))))) ((_ re.capture 10) (re.++ ((_ re.capture 11) (re.union (re.++ (str.to.re "C") (str.to.re "M")) (re.++ (str.to.re "D") (str.to.re "C")))) (re.union (str.to.re "D") (str.to.re "M"))))) ((_ re.capture 12) (re.++ (str.to.re "I") (re.++ (re.union (str.to.re "V") (str.to.re "X")) (str.to.re "I"))))) ((_ re.capture 13) (re.++ (str.to.re "X") (re.++ (re.union (str.to.re "C") (str.to.re "L")) (str.to.re "X"))))) ((_ re.capture 14) (re.++ (str.to.re "C") (re.++ (re.union (str.to.re "D") (str.to.re "M")) (str.to.re "C"))))) ((_ re.capture 15) (re.++ ((_ re.loop 0 2) (str.to.re "I")) (re.union (str.to.re "V") (str.to.re "X"))))) ((_ re.capture 16) (re.++ ((_ re.loop 0 2) (str.to.re "X")) (re.union (str.to.re "C") (str.to.re "L"))))) ((_ re.capture 17) (re.++ ((_ re.loop 0 2) (str.to.re "C")) (re.union (str.to.re "D") (str.to.re "M"))))) re.all)))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
