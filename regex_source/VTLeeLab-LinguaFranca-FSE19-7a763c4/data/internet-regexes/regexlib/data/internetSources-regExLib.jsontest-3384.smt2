
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all)) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ ((_ re.capture 1) (re.union (re.++ re.begin-anchor ((_ re.capture 2) ((_ re.capture 3) (re.++ ((_ re.capture 4) (re.++ (str.to.re "G") (re.++ (str.to.re "I") (str.to.re "R")))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 5) ((_ re.capture 6) (re.++ (str.to.re "0") (re.++ (str.to.re "A") (str.to.re "A")))))))))) (re.++ (re.++ ((_ re.capture 7) (re.union (re.union (re.union ((_ re.capture 8) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) ((_ re.capture 9) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) ((_ re.capture 10) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H") (re.union (str.to.re "J") (re.union (str.to.re "K") (re.union (str.to.re "S") (re.union (str.to.re "T") (re.union (str.to.re "U") (str.to.re "W"))))))))))) ((_ re.capture 11) (re.++ (re.union (re.++ (re.*? re.allchar) (re.range "A" "P")) (re.union (re.++ (re.*? re.allchar) (re.range "R" "U")) (re.union (re.++ (re.*? re.allchar) (str.to.re "W")) (re.union (re.++ (re.*? re.allchar) (str.to.re "Y")) (re.++ (re.*? re.allchar) (str.to.re "Z")))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.++ (re.range "0" "9") (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (str.to.re "E") (re.union (str.to.re "H") (re.union (str.to.re "M") (re.union (str.to.re "N") (re.union (str.to.re "P") (re.union (str.to.re "R") (re.union (str.to.re "V") (re.union (str.to.re "W") (re.union (str.to.re "X") (str.to.re "Y")))))))))))))))))) (re.++ ((_ re.loop 0 1) (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 12) (re.++ (re.range "0" "9") ((_ re.loop 0 2) (re.union (str.to.re "A") (re.union (str.to.re "B") (re.union (re.range "D" "H") (re.union (str.to.re "J") (re.union (str.to.re "L") (re.union (str.to.re "N") (re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) re.end-anchor))) re.all))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
