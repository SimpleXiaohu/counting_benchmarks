;;( *)(?:public\s*|partial\s*|abstract\s*)*\s*(class|enum|struct|interface)\s+([\w\d_<>, ]+?)(?:\s*:\s*((?:(?:[\w\d\._<>, ]+?)(?:,\s+)?)+))?\s*\{((?:.|\n|\r)+?^\1\})

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ ((_ re.capture 1) (re.++ (re.*? re.allchar) (re.* (str.to.re " ")))) (re.++ (re.* (re.union (re.union (re.++ (str.to.re "p") (re.++ (str.to.re "u") (re.++ (str.to.re "b") (re.++ (str.to.re "l") (re.++ (str.to.re "i") (re.++ (str.to.re "c") (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))))))))) (re.++ (str.to.re "p") (re.++ (str.to.re "a") (re.++ (str.to.re "r") (re.++ (str.to.re "t") (re.++ (str.to.re "i") (re.++ (str.to.re "a") (re.++ (str.to.re "l") (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))))))))))) (re.++ (str.to.re "a") (re.++ (str.to.re "b") (re.++ (str.to.re "s") (re.++ (str.to.re "t") (re.++ (str.to.re "r") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (re.++ (str.to.re "t") (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))))))))))))) (re.++ (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 2) (re.union (re.union (re.union (re.++ (str.to.re "c") (re.++ (str.to.re "l") (re.++ (str.to.re "a") (re.++ (str.to.re "s") (str.to.re "s"))))) (re.++ (str.to.re "e") (re.++ (str.to.re "n") (re.++ (str.to.re "u") (str.to.re "m"))))) (re.++ (str.to.re "s") (re.++ (str.to.re "t") (re.++ (str.to.re "r") (re.++ (str.to.re "u") (re.++ (str.to.re "c") (str.to.re "t"))))))) (re.++ (str.to.re "i") (re.++ (str.to.re "n") (re.++ (str.to.re "t") (re.++ (str.to.re "e") (re.++ (str.to.re "r") (re.++ (str.to.re "f") (re.++ (str.to.re "a") (re.++ (str.to.re "c") (str.to.re "e"))))))))))) (re.++ (re.+ (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ ((_ re.capture 3) (re.+? (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (re.range "0" "9") (re.union (str.to.re "_") (re.union (str.to.re "<") (re.union (str.to.re ">") (re.union (str.to.re ",") (str.to.re " "))))))))) (re.++ (re.opt (re.++ (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (str.to.re ":") (re.++ (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) ((_ re.capture 4) (re.+ (re.++ (re.+? (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (re.range "0" "9") (re.union (str.to.re ".") (re.union (str.to.re "_") (re.union (str.to.re "<") (re.union (str.to.re ">") (re.union (str.to.re ",") (str.to.re " "))))))))) (re.opt (re.++ (str.to.re ",") (re.+ (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))))))))))))) (re.++ (re.* (re.union (str.to.re " ") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}"))))))) (re.++ (str.to.re "{") (re.++ ((_ re.capture 5) (re.++ (re.+? (re.union (re.union (re.diff (re.range "\x01" "\xff") (str.to.re "\n")) (str.to.re "\u{0a}")) (str.to.re "\u{0d}"))) (re.++ re.begin-anchor (re.++ (_ re.reference 1) (str.to.re "}"))))) re.all))))))))))))

(assert (> (str.len var0) 10))

(check-sat)
(get-model)
