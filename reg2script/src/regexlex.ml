# 2 "regexlex.mll"
 
    open Regex ;;
    open Char ;;
    open String ;;    
    exception Eof;;

let rec xtou s = "\\u{"^(String.sub s 2 ((String.length s) - 2)) ^ "}"
 ;;

let rec otox s = Printf.sprintf "\\u{%04x}" (int_of_string ("0o"^(String.sub s 1 (String.length s - 1)))) ;;

let rec getcode s = (let ss = (String.get s 1) in let c = (code ss) in
                   Printf.sprintf "\\u{%04x}" c) ;;

let lowercase_asciiT = function
  | 'A' .. 'Z' as c -> unsafe_chr(code c + 32)
  | c -> c

let lowercase_ascii s = map lowercase_asciiT s

exception Lexerror of string ;;

let cutU s = s
(*    if (String.length s == 8) && (get s 3) = '0' && (get s 4) = '0' then ("\\u{" ^ (String.sub s 5 3))
    else if (String.length s == 7) && (get s 3) = '0'  then ("\\u{" ^ (String.sub s 4 3))
    else if (String.length s < 7) then s
    else (raise (Lexerror "unicode exceed \\uff"))
*)

# 32 "regexlex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\000\000\182\255\185\255\209\000\186\255\189\255\192\255\
    \197\255\204\000\225\255\229\255\230\255\236\255\237\255\238\255\
    \239\255\240\255\236\000\244\255\245\255\246\255\044\001\045\001\
    \046\001\251\255\252\255\253\255\254\255\255\255\250\255\249\255\
    \248\255\178\255\179\255\183\255\187\255\188\255\190\255\191\255\
    \062\001\072\001\082\001\105\001\198\255\199\255\200\255\201\255\
    \202\255\203\255\204\255\205\255\206\255\207\255\208\255\209\255\
    \210\255\211\255\212\255\213\255\214\255\215\255\218\255\219\255\
    \220\255\221\255\222\255\223\255\226\255\227\255\231\255\232\255\
    \233\255\234\255\235\255\241\255\242\255\243\255\143\001\166\001\
    \198\001\217\255\221\001\151\001\181\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\070\000\255\255\255\255\255\255\
    \255\255\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\073\000\255\255\255\255\255\255\027\000\031\000\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \062\000\062\000\072\000\072\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\059\000\060\000\
    \061\000\255\255\071\000\075\000\255\255";
  Lexing.lex_default =
   "\001\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\017\000\005\000\002\000\019\000\002\000\002\000\006\000\
    \021\000\020\000\024\000\023\000\013\000\010\000\015\000\014\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\008\000\002\000\002\000\016\000\002\000\009\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\027\000\018\000\026\000\007\000\002\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\011\000\025\000\022\000\002\000\255\255\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \255\255\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\081\000\033\000\033\000\036\000\075\000\
    \077\000\033\000\076\000\037\000\048\000\044\000\045\000\054\000\
    \033\000\060\000\074\000\049\000\041\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\033\000\071\000\
    \073\000\055\000\072\000\070\000\061\000\035\000\050\000\035\000\
    \052\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\062\000\
    \035\000\035\000\064\000\066\000\035\000\035\000\035\000\047\000\
    \034\000\046\000\039\000\033\000\033\000\035\000\051\000\035\000\
    \053\000\035\000\057\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\059\000\035\000\035\000\035\000\056\000\063\000\
    \058\000\042\000\065\000\067\000\043\000\035\000\035\000\069\000\
    \038\000\068\000\033\000\032\000\031\000\030\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \000\000\000\000\000\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\000\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\000\000\000\000\000\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\009\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\022\000\023\000\024\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\042\000\042\000\042\000\042\000\042\000\
    \042\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\043\000\043\000\043\000\043\000\043\000\
    \255\255\255\255\255\255\042\000\042\000\042\000\042\000\042\000\
    \042\000\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\255\255\043\000\043\000\043\000\043\000\043\000\043\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\079\000\
    \079\000\079\000\079\000\079\000\079\000\255\255\255\255\255\255\
    \078\000\078\000\078\000\078\000\078\000\078\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\079\000\
    \079\000\079\000\079\000\079\000\079\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec lexer lexbuf =
   __ocaml_lex_lexer_rec lexbuf 0
and __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "regexlex.mll"
                    (lexer lexbuf)
# 277 "regexlex.ml"

  | 1 ->
# 34 "regexlex.mll"
                    (Latom " ")
# 282 "regexlex.ml"

  | 2 ->
# 35 "regexlex.mll"
                                    (Llalt)
# 287 "regexlex.ml"

  | 3 ->
# 36 "regexlex.mll"
                                    (Lralt)
# 292 "regexlex.ml"

  | 4 ->
# 37 "regexlex.mll"
                                    (Lalt)
# 297 "regexlex.ml"

  | 5 ->
# 38 "regexlex.mll"
                                    (Llstar)
# 302 "regexlex.ml"

  | 6 ->
# 39 "regexlex.mll"
                                    (Llplus)
# 307 "regexlex.ml"

  | 7 ->
# 40 "regexlex.mll"
                                    (Loptloop)
# 312 "regexlex.ml"

  | 8 ->
# 41 "regexlex.mll"
                                    (Lstar)
# 317 "regexlex.ml"

  | 9 ->
# 42 "regexlex.mll"
                                    (Llparen)
# 322 "regexlex.ml"

  | 10 ->
# 43 "regexlex.mll"
                                    (Lrparen)
# 327 "regexlex.ml"

  | 11 ->
# 44 "regexlex.mll"
                 (Ldoller)
# 332 "regexlex.ml"

  | 12 ->
# 45 "regexlex.mll"
                   (Latom "$")
# 337 "regexlex.ml"

  | 13 ->
# 46 "regexlex.mll"
                   (Latom "&")
# 342 "regexlex.ml"

  | 14 ->
# 47 "regexlex.mll"
                   (Latom "#")
# 347 "regexlex.ml"

  | 15 ->
# 48 "regexlex.mll"
                 (Lexc)
# 352 "regexlex.ml"

  | 16 ->
# 49 "regexlex.mll"
                 (Lequal)
# 357 "regexlex.ml"

  | 17 ->
# 50 "regexlex.mll"
                                    (Ldot)
# 362 "regexlex.ml"

  | 18 ->
# 51 "regexlex.mll"
                                    (Latom "/")
# 367 "regexlex.ml"

  | 19 ->
# 52 "regexlex.mll"
                 (Lcomma)
# 372 "regexlex.ml"

  | 20 ->
# 53 "regexlex.mll"
                                      (Latom ".")
# 377 "regexlex.ml"

  | 21 ->
# 54 "regexlex.mll"
                                      (Latom "<")
# 382 "regexlex.ml"

  | 22 ->
# 55 "regexlex.mll"
                                      (Latom ">")
# 387 "regexlex.ml"

  | 23 ->
# 56 "regexlex.mll"
                                      (Latom ";")
# 392 "regexlex.ml"

  | 24 ->
# 57 "regexlex.mll"
                                      (Latom "?")
# 397 "regexlex.ml"

  | 25 ->
# 58 "regexlex.mll"
                                     (LEOF)
# 402 "regexlex.ml"

  | 26 ->
# 59 "regexlex.mll"
                  (LlParen)
# 407 "regexlex.ml"

  | 27 ->
# 60 "regexlex.mll"
                  (LrParen)
# 412 "regexlex.ml"

  | 28 ->
# 61 "regexlex.mll"
                    (Latom "{")
# 417 "regexlex.ml"

  | 29 ->
# 62 "regexlex.mll"
                    (Latom "}")
# 422 "regexlex.ml"

  | 30 ->
# 63 "regexlex.mll"
                  (Lrange)
# 427 "regexlex.ml"

  | 31 ->
# 64 "regexlex.mll"
                  (Lplus)
# 432 "regexlex.ml"

  | 32 ->
# 65 "regexlex.mll"
                                     (Lword)
# 437 "regexlex.ml"

  | 33 ->
# 66 "regexlex.mll"
                                     (Lnword)
# 442 "regexlex.ml"

  | 34 ->
# 67 "regexlex.mll"
                                     (Latom "\\u{0B}")
# 447 "regexlex.ml"

  | 35 ->
# 68 "regexlex.mll"
                                     (Latom "\\V"; raise (Lexerror "\\V"))
# 452 "regexlex.ml"

  | 36 ->
# 69 "regexlex.mll"
                    (Lspace)
# 457 "regexlex.ml"

  | 37 ->
# 70 "regexlex.mll"
                    (Lnonspace)
# 462 "regexlex.ml"

  | 38 ->
# 71 "regexlex.mll"
                   (Lloption)
# 467 "regexlex.ml"

  | 39 ->
# 72 "regexlex.mll"
                                     (Loption)
# 472 "regexlex.ml"

  | 40 ->
# 73 "regexlex.mll"
                                     (Latom "@")
# 477 "regexlex.ml"

  | 41 ->
# 74 "regexlex.mll"
                                     (Latom (let s = (Lexing.lexeme lexbuf) in String.sub s  1 (String.length s - 1)))
# 482 "regexlex.ml"

  | 42 ->
# 75 "regexlex.mll"
                    (Latom "\\u{0a}")
# 487 "regexlex.ml"

  | 43 ->
# 76 "regexlex.mll"
                    (Latom "\\u{09}")
# 492 "regexlex.ml"

  | 44 ->
# 77 "regexlex.mll"
                    (Latom "\\u{0c}")
# 497 "regexlex.ml"

  | 45 ->
# 78 "regexlex.mll"
                    (Latom "\\u{0d}")
# 502 "regexlex.ml"

  | 46 ->
# 79 "regexlex.mll"
                    (Latom "=")
# 507 "regexlex.ml"

  | 47 ->
# 80 "regexlex.mll"
                    (Latom "+")
# 512 "regexlex.ml"

  | 48 ->
# 81 "regexlex.mll"
                    (Ldigit)
# 517 "regexlex.ml"

  | 49 ->
# 82 "regexlex.mll"
                    (Lndigit)
# 522 "regexlex.ml"

  | 50 ->
# 83 "regexlex.mll"
                    (Latom "\\b"; raise (Lexerror "\\b"))
# 527 "regexlex.ml"

  | 51 ->
# 84 "regexlex.mll"
                    (Latom "\\B"; raise (Lexerror "\\B"))
# 532 "regexlex.ml"

  | 52 ->
# 85 "regexlex.mll"
                                     (Latom "/")
# 537 "regexlex.ml"

  | 53 ->
# 86 "regexlex.mll"
                                     (Latom "(")
# 542 "regexlex.ml"

  | 54 ->
# 87 "regexlex.mll"
                                     (Latom "[")
# 547 "regexlex.ml"

  | 55 ->
# 88 "regexlex.mll"
                                     (Latom "]")
# 552 "regexlex.ml"

  | 56 ->
# 89 "regexlex.mll"
                                     (Latom "*")
# 557 "regexlex.ml"

  | 57 ->
# 90 "regexlex.mll"
                                     (Latom ")")
# 562 "regexlex.ml"

  | 58 ->
# 91 "regexlex.mll"
                                     (Lcolon)
# 567 "regexlex.ml"

  | 59 ->
# 92 "regexlex.mll"
                                            (Latom (cutU (lowercase_ascii (xtou (Lexing.lexeme lexbuf)))))
# 572 "regexlex.ml"

  | 60 ->
# 93 "regexlex.mll"
                                            (Latom (cutU (lowercase_ascii (xtou (Lexing.lexeme lexbuf)))))
# 577 "regexlex.ml"

  | 61 ->
# 94 "regexlex.mll"
                                            (Latom (cutU (lowercase_ascii (otox (Lexing.lexeme lexbuf)))))
# 582 "regexlex.ml"

  | 62 ->
# 95 "regexlex.mll"
                                      (Lbackref (Lexing.lexeme lexbuf))
# 587 "regexlex.ml"

  | 63 ->
# 96 "regexlex.mll"
                                      (Lcaret)
# 592 "regexlex.ml"

  | 64 ->
# 97 "regexlex.mll"
                                       (Latom "^")
# 597 "regexlex.ml"

  | 65 ->
# 98 "regexlex.mll"
                                       (Latom "|")
# 602 "regexlex.ml"

  | 66 ->
# 99 "regexlex.mll"
                                      (Latom "\\u{27}")
# 607 "regexlex.ml"

  | 67 ->
# 100 "regexlex.mll"
                                                (Latom "\\u{27}")
# 612 "regexlex.ml"

  | 68 ->
# 101 "regexlex.mll"
                                               (Latom "\\u{22}")
# 617 "regexlex.ml"

  | 69 ->
# 102 "regexlex.mll"
                                             (Latom "\\u{22}")
# 622 "regexlex.ml"

  | 70 ->
# 103 "regexlex.mll"
                                  (Latom (Lexing.lexeme lexbuf))
# 627 "regexlex.ml"

  | 71 ->
# 104 "regexlex.mll"
                                    (Latom (Lexing.lexeme lexbuf))
# 632 "regexlex.ml"

  | 72 ->
# 105 "regexlex.mll"
                                       (Latom (let s = (Lexing.lexeme lexbuf) in String.sub s  1 (String.length s - 1)))
# 637 "regexlex.ml"

  | 73 ->
# 106 "regexlex.mll"
                                                (Latom (Lexing.lexeme lexbuf))
# 642 "regexlex.ml"

  | 74 ->
# 107 "regexlex.mll"
                                                       (Latom (Lexing.lexeme lexbuf))
# 647 "regexlex.ml"

  | 75 ->
# 108 "regexlex.mll"
                                       (Latom (Lexing.lexeme lexbuf))
# 652 "regexlex.ml"

  | 76 ->
# 109 "regexlex.mll"
                     (Latom "\\\\")
# 657 "regexlex.ml"

  | 77 ->
# 110 "regexlex.mll"
                                                    (Latom (let s = (Lexing.lexeme lexbuf) in String.sub s  1 (String.length s - 1)))
# 662 "regexlex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state

;;

